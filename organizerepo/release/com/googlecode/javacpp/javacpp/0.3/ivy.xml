<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one
   or more contributor license agreements.  See the NOTICE file
   distributed with this work for additional information
   regarding copyright ownership.  The ASF licenses this file
   to you under the Apache License, Version 2.0 (the
   "License"); you may not use this file except in compliance
   with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.    
-->
<ivy-module version="2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="http://ant.apache.org/ivy/schemas/ivy.xsd">
    <info
        organisation="com.googlecode.javacpp"
        module="javacpp"
        revision="0.3"
        publication="011013"
        status="release">
         <license name="GNU GPL 2.0-" url="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html"/>
        <ivyauthor name="Fred Grott, GrottWorkShop" url="http://about.me/fredrott"/>
        <description homepage="http://code.google.com/p/javacpp/">
      JavaCPP provides efficient access to native C++ inside Java, not unlike the way some 
      C/C++ compilers interact with assembly language. No need to invent new languages 
      such as C++/CLI or Cython. Under the hood, it uses JNI, so it works with all Java 
      implementations, including Android. In contrast to other approaches (SWIG, CableSwig, 
      JNIGeneratorApp, JNIWrapper, Platform Invoke, GlueGen, JNIDirect, JNA, JNIEasy, 
      JniMarshall, JNative, J/Invoke, HawtJNI, BridJ, etc.), it supports naturally and efficiently 
      many features of the C++ language often considered problematic, including overloaded 
      operators, template classes and functions, member function pointers, callback functions, 
      functors, nested struct definitions, variable length arguments, nested namespaces, large 
      data structures containing arbitrary cycles, multiple inheritance, passing/returning by 
      value/reference/vector, anonymous unions, bit fields, exceptions, destructors and 
      garbage collection. Obviously, neatly supporting the whole of C++ would require more 
      work (although one could argue about the intrinsic neatness of C++), but I am releasing 
      it here as a proof of concept. I have already used it to produce complete interfaces to 
      OpenCV, FFmpeg, libdc1394, PGR FlyCapture, OpenKinect, videoInput, and ARToolKitPlus 
      as part of JavaCV.

      
        </description>
	</info>
	<configurations>
        <conf name="runtime" description="runtime"/>
         <conf name="compile" description="for compiling"/>
         <conf name="aptfactory" description="for annotations, aop, etc"/>
         <conf name="javadoc" description="for javadoc"/>
         <conf name="sources" description="sources"/>
         <conf name="antask" description="ant task library"/>
      </configurations><configurations>
        <conf name="runtime" description="runtime"/>
         <conf name="compile" description="for compiling"/>
         <conf name="aptfactory" description="for annotations, aop, etc"/>
         <conf name="javadoc" description="for javadoc"/>
         <conf name="sources" description="sources"/>
         <conf name="anttask" description="ant task library"/>
         <conf name="gradle" description="gradle plugins"/>
         <conf name="aspectjrt" description="aop"/>
         <conf name="aspectjweaver" description="asepctj weaver"/>
         <conf name="aspectjtools" description="aspectjtools"/>
         <conf name="ejc" description-"eclipse java compiler"/>
      </configurations>
	<publications >
           <artifact name="javacpp" type="jar" ext="jar" conf="compile"/>
    </publications>
</ivy-module>
